// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends digital services for a business based on its profile.
 *
 * - recommendServices - A function that recommends digital services.
 * - ServiceRecommendationInput - The input type for the recommendServices function.
 * - ServiceRecommendationOutput - The return type for the recommendServices function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ServiceRecommendationInputSchema = z.object({
  businessProfile: z
    .string()
    .describe("A detailed description of the business's online presence, including website, social media, and customer reviews."),
  businessType: z.string().describe('The category or type of business (e.g., restaurant, retail, service).'),
});

export type ServiceRecommendationInput = z.infer<typeof ServiceRecommendationInputSchema>;

const ServiceRecommendationOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      service: z.string().describe('The name of the recommended digital service.'),
      reasoning: z.string().describe('Explanation of why this service would benefit the business.'),
    })
  ).describe('A list of recommended digital services with reasoning for each.'),
});

export type ServiceRecommendationOutput = z.infer<typeof ServiceRecommendationOutputSchema>;

export async function recommendServices(input: ServiceRecommendationInput): Promise<ServiceRecommendationOutput> {
  return recommendServicesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'serviceRecommendationPrompt',
  input: {schema: ServiceRecommendationInputSchema},
  output: {schema: ServiceRecommendationOutputSchema},
  prompt: `You are an expert digital marketing consultant.

  Based on the following business profile and business type, recommend a list of digital services that would benefit the business. Explain your reasoning for each recommendation.

  Business Type: {{{businessType}}}
  Business Profile: {{{businessProfile}}}

  Format your output as a JSON object with a 'recommendations' field. Each item in the 'recommendations' array should include the 'service' name and a detailed 'reasoning' for the recommendation.
  `,
});

const recommendServicesFlow = ai.defineFlow(
  {
    name: 'recommendServicesFlow',
    inputSchema: ServiceRecommendationInputSchema,
    outputSchema: ServiceRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
